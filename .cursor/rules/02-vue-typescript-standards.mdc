---
globs: "*.vue,*.ts,*.js"
description: "Vue 3 + TypeScript 编码规范和最佳实践"
---

# Vue 3 + TypeScript 编码规范

## Vue 组件规范

### Composition API 优先
- 使用 `<script setup lang="ts">` 语法
- 优先使用 Composition API 而不是 Options API
- 使用 `ref()` 和 `reactive()` 管理响应式状态
- 使用 `computed()` 创建计算属性

### 组件结构顺序
```vue
<script setup lang="ts">
// 1. 导入语句
import { ref, computed } from 'vue'

// 2. 类型定义
interface ComponentProps {
  // 属性定义
}

// 3. Props 和 Emits
const props = defineProps<ComponentProps>()
const emit = defineEmits<{
  // 事件定义
}>()

// 4. 响应式数据
const state = ref()

// 5. 计算属性
const computed = computed(() => {})

// 6. 方法
function handleClick() {}
</script>

<template>
  <!-- 模板内容 -->
</template>

<style scoped>
/* 样式 */
</style>
```

## TypeScript 规范

### 类型定义
- 为所有函数参数和返回值添加类型注解
- 使用 `interface` 定义对象类型
- 避免使用 `any` 类型，使用具体类型或 `unknown`
- 使用泛型提高代码复用性

### 变量命名
- 使用 camelCase 命名变量和函数
- 使用 PascalCase 命名类型和接口
- 使用 UPPER_SNAKE_CASE 命名常量
- 布尔值变量使用 `is`、`has`、`can` 等前缀

## 代码风格

### 格式化要求
- 使用 2 个空格缩进
- 语句结尾使用分号
- 字符串优先使用单引号
- 对象和数组的最后一个元素后添加逗号

### 函数编写
- 优先使用箭头函数
- 函数参数过多时使用对象参数
- 复杂逻辑拆分为小函数
- 添加适当的注释说明

## Vue 特定规范

### 模板语法
- 使用 v-model 进行双向绑定
- 事件处理使用 @click 简写语法
- 条件渲染优先使用 v-show（频繁切换）或 v-if
- 列表渲染必须添加 key 属性

### 响应式数据
- 基本类型使用 `ref()`
- 对象类型可使用 `reactive()` 或 `ref()`
- 避免直接修改 props
- 使用 `toRefs()` 解构 reactive 对象

### 生命周期
- 使用 Composition API 的生命周期钩子
- 在 `onMounted` 中处理 DOM 操作
- 在 `onUnmounted` 中清理定时器和事件监听

## 性能优化

### 代码分割
- 大型组件使用异步加载
- 路由懒加载
- 第三方库按需引入

### 响应式优化
- 避免在模板中使用复杂表达式
- 使用 `computed` 缓存计算结果
- 大数据列表使用虚拟滚动

## 错误处理
- 使用 try-catch 包装可能出错的代码
- 提供用户友好的错误提示
- 记录错误日志用于调试

## 代码注释
- 复杂业务逻辑添加注释
- 公共函数添加 JSDoc 注释
- TODO 注释标记待完成功能